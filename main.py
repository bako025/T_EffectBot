import asyncio
import os
import json
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —á–∞—ë–≤
with open("tea_db.json", encoding="utf-8") as f:
    tea_db = json.load(f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø T-Effect Bot. –ù–∞–ø–∏—à–∏ /list, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —á–∞–∏, –∏–ª–∏ /tea <–Ω–∞–∑–≤–∞–Ω–∏–µ>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É."
    )

# –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message(F.text == "/list")
async def list_handler(message: types.Message):
    names = [f"‚Ä¢ {name.title()}" for name in tea_db.keys()]
    await message.answer("üìã –ß–∞–∏ –≤ –±–∞–∑–µ:\n\n" + "\n".join(names))

# –ö–æ–º–∞–Ω–¥–∞ /tea <–Ω–∞–∑–≤–∞–Ω–∏–µ>
@dp.message(F.text.startswith("/tea"))
async def tea_handler(message: types.Message):
    name = message.text.replace("/tea", "").strip().lower()
    tea = tea_db.get(name)
    if not tea:
        await message.answer("‚ö†Ô∏è –ß–∞–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π /list.")
        return

    text = f"<b>{name.title()}</b>\n\n"
    for key, val in tea.items():
        text += f"<b>{key}:</b> {val}\n"
    await message.answer(text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
